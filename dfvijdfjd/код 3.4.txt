 
using System;
using System.Collections.Generic;

class GFG
{

    static int findLongestConseqSubseq(int[] arr,
                                       int x)
    {


        Array.Sort(arr);

        int ans = 0, count = 0;

        List<int> v = new List<int>();
        v.Add(10);


        for (int i = 1; i < x; i++)
        {
            if (arr[i] != arr[i - 1])
                v.Add(arr[i]);
        }


        for (int i = 0; i < v.Count; i++)
        {


            if (i > 0 && v[i] == v[i - 1] + 1)
                count++;
            else
                count = 1;


            ans = Math.Max(ans, count);
        }
        return ans;
    }


    static void Main()
    {
        Console.OutputEncoding = System.Text.Encoding.Default;
         int n, m;
        
            Console.Write("Введите количество строк матрицы : ");
            n = int.Parse(Console.ReadLine());
            Console.Write("Введите количество столбцов матрицы : ");
            m = int.Parse(Console.ReadLine());

            int[,] arr = new int[m, n];
            Random rand = new Random();
        
        for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    arr[i, j] = rand.Next(-50, 50);
                }
            }
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.Write(arr[i, j] + " ");
                }
                Console.WriteLine();
            }
            int count = 0;
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n - 1; j++)
                {
                    if ((j % 2 == 1) && (arr[i, j] != arr[i, j + 1]))
                        count++;
                }
                Console.WriteLine(" В " + (i + 1) + " строке = " + count);
                count = 0;

            }

        Console.WriteLine("Довжина і початкові індекси всіх неперервних послідовностей чисел : " + arr);
                         


    }
}
